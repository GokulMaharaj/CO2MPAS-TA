from co2mpas.functions.io import get_types
from schema import Schema, Use, And, Or, Optional

def define_data_schema():
    from ..co2mpas_model.physical.gear_box.AT_gear import CMV, MVL, GSPV
    from sklearn.tree import DecisionTreeClassifier
    from lmfit import Parameters
    import numpy
    error_coefficients = {
        'mean_absolute_error': float,
        'correlation_coefficient': float,
        'accuracy_score': float
    }

    function = Use(lambda f: hasattr(f, '__call__'))

    schema = Schema({
        Optional('CMV'): Use(CMV),
        Optional('CMV_Cold_Hot'): {'hot': Use(CMV), 'cold': Use(CMV)},
        Optional('CMV_Cold_Hot_error_coefficients'): error_coefficients,
        Optional('CMV_error_coefficients'): error_coefficients,
        Optional('DT_VA'): DecisionTreeClassifier,
        Optional('DT_VAP'): DecisionTreeClassifier,
        Optional('DT_VAP_error_coefficients'): error_coefficients,
        Optional('DT_VAT'): DecisionTreeClassifier,
        Optional('DT_VATP'): DecisionTreeClassifier,
        Optional('DT_VATP_error_coefficients'): error_coefficients,
        Optional('DT_VAT_error_coefficients'): error_coefficients,
        Optional('DT_VA_error_coefficients'): error_coefficients,
        Optional('GSPV'): GSPV,
        Optional('GSPV_Cold_Hot'): dict,
        Optional('GSPV_Cold_Hot_error_coefficients'): error_coefficients,
        Optional('GSPV_error_coefficients'): error_coefficients,
        Optional('MVL'): Use(MVL),
        Optional('alternator_charging_currents'): (float, float),
        Optional('alternator_current_model'): function,
        Optional('alternator_status_model'): function,
        Optional('clutch_model'): function,
        Optional('co2_emissions_model'): function,
        Optional('co2_error_function_on_emissions'): function,
        Optional('co2_error_function_on_phases'): function,
        Optional('cold_start_speed_model'): function,
        Optional('clutch_window'): (float, float),
        Optional('co2_params_calibrated'): dict,
        Optional('co2_params_initial_guess'): Parameters,
        Optional('cycle_type'): str,
        Optional('electric_load'): (float, float),
        Optional('engine_is_turbo'): Use(bool),
        Optional('engine_normalization_temperature_window'): (float, float),
        Optional('engine_temperature_regression_model'): function,
        Optional('engine_type'): str,
        Optional('fuel_type'): str,
        Optional('full_load_curve'): function,
        Optional('gear_box_efficiency_constants'): dict,
        Optional('gear_box_efficiency_parameters_cold_hot'): dict,
        Optional('gear_box_ratios'): {int: Use(float)},
        Optional('gear_box_type'): str,
        Optional('has_energy_recuperation'): Use(bool),
        Optional('is_cycle_hot'): Use(bool),
        Optional('idle_engine_speed'): (float, float),
        Optional('k1'): Use(int),
        Optional('k2'): Use(int),
        Optional('k5'): Use(int),
        Optional('max_gear'): Use(int),
        Optional('n_dyno_axes'): Use(int),
        Optional('n_wheel_drive'): Use(int),
        Optional('road_loads'): Use(tuple),
        Optional('start_stop_model'): function,
        Optional('temperature_references'): (float, float),
        Optional('torque_converter_model'): function,
        Optional('velocity_speed_ratios'): {int: Use(float)},

        Optional('accelerations'): numpy.array,
        Optional('alternator_currents'): numpy.array,
        Optional('alternator_powers_demand'): numpy.array,
        Optional('alternator_statuses'): numpy.array,
        Optional('auxiliaries_power_losses'): numpy.array,
        Optional('auxiliaries_torque_loss'): float,
        Optional('auxiliaries_torque_losses'): numpy.array,
        Optional('battery_currents'): numpy.array,
        Optional('clutch_TC_powers'): numpy.array,
        Optional('clutch_TC_speeds_delta'): numpy.array,
        Optional('co2_emissions'): numpy.array,
        Optional('cold_start_speeds_delta'): numpy.array,
        Optional('engine_coolant_temperatures'): numpy.array,
        Optional('engine_powers_out'): numpy.array,
        Optional('engine_speeds_out'): numpy.array,
        Optional('engine_speeds_out_hot'): numpy.array,
        Optional('engine_starts'): numpy.array,
        Optional('final_drive_powers_in'): numpy.array,
        Optional('final_drive_speeds_in'): numpy.array,
        Optional('final_drive_torques_in'): numpy.array,
        Optional('fuel_consumptions'): numpy.array,
        Optional('full_load_powers'): numpy.array,
        Optional('full_load_speeds'): numpy.array,
        Optional('full_load_torques'): numpy.array,
        Optional('gear_box_efficiencies'): numpy.array,
        Optional('gear_box_powers_in'): numpy.array,
        Optional('gear_box_speeds_in'): numpy.array,
        Optional('gear_box_temperatures'): numpy.array,
        Optional('gear_box_torque_losses'): numpy.array,
        Optional('gear_box_torques_in'): numpy.array,
        Optional('gear_shifts'): numpy.array,
        Optional('gears'): numpy.array,
        Optional('identified_co2_emissions'): numpy.array,
        Optional('motive_powers'): numpy.array,
        Optional('on_engine'): numpy.array,
        Optional('phases_co2_emissions'): numpy.array,
        Optional('state_of_charges'): numpy.array,
        Optional('times'): numpy.array,
        Optional('velocities'): numpy.array,
        Optional('wheel_powers'): numpy.array,
        Optional('wheel_speeds'): numpy.array,
        Optional('wheel_torques'): numpy.array,
        str: float
    })
    return schema