def nedc_velocities(times, gear_box_type):
    """
    Returns the velocity profile according to NEDC and gear box type [km/h].

    :param times:
        Time vector [s].
    :type times: numpy.array

    :param gear_box_type:
        Gear box type (manual or automatic or cvt).
    :type gear_box_type: str

    :return:
        Velocity vector [km/h].
    :rtype: numpy.array
    """

    parts = {
        'manual':
            {
                'part one': [
                    [0, 0], [11, 0], [15, 15], [23, 15], [25, 10], [28, 0],
                    [49, 0], [54, 15], [56, 15], [61, 32], [85, 32], [93, 10],
                    [96, 0], [117, 0], [122, 15], [124, 15], [133, 35],
                    [135, 35], [143, 50], [155, 50], [163, 35], [176, 35],
                    [178, 35], [185, 10], [188, 0], [195, 0]
                ],
                'part two': [
                    [0, 0], [20, 0], [25, 15], [27, 15], [36, 35], [38, 35],
                    [46, 50], [48, 50], [61, 70], [111, 70], [119, 50],
                    [188, 50], [201, 70], [251, 70], [286, 100], [316, 100],
                    [336, 120], [346, 120], [362, 80], [370, 50], [380, 0],
                    [400, 0]
                ]
            },
        'automatic':
            {
                'part one': [
                    [0, 0], [11, 0], [15, 15], [23, 15], [25, 10], [28, 0],
                    [49, 0], [61, 32], [85, 32], [93, 10], [96, 0], [117, 0],
                    [143, 50], [155, 50], [163, 35], [176, 35], [178, 35],
                    [185, 10], [188, 0], [195, 0]
                ],
                'part two': [
                    [0, 0], [20, 0], [61, 70], [111, 70], [119, 50], [188, 50],
                    [201, 70], [251, 70], [286, 100], [316, 100], [336, 120],
                    [346, 120], [362, 80], [370, 50], [380, 0], [400, 0]]
            }
    }

    parts['cvt'] = parts['automatic']

    parts = parts[gear_box_type]

    t, v = zip(*parts['part one'])

    _t, velocities = _repeat_part_one(t, v)

    t, v = zip(*parts['part two'])

    _t.extend(np.asarray(t) + _t[-1])
    velocities.extend(v)

    n = int(np.ceil(times[-1] / _t[-1]))

    v = np.interp(times, np.tile(_t, (n,)), np.tile(velocities, (n,)))

    return v
