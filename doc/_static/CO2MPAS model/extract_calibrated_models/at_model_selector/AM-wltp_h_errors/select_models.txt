def at_models_selector(d, at_pred_inputs, models_ids, data):
    sgs = 'specific_gear_shifting'
    # Namespace shortcuts.
    try:
        vel, vsr = data['velocities'], data['velocity_speed_ratios']
        t_eng, t_gears = data['engine_speeds_out'], data['gears']
        sv, at_m = data['stop_velocity'], data[sgs]
    except KeyError:
        return {}

    c_dicts, select, _g = dsp_utl.combine_dicts, dsp_utl.selector, d.dispatch
    t_e = ('mean_absolute_error', 'accuracy_score', 'correlation_coefficient')

    # at_models to be assessed.
    at_m = {'CMV', 'CMV_Cold_Hot', 'DT_VA', 'DT_VAT', 'DT_VAP', 'DT_VATP',
            'GSPV', 'GSPV_Cold_Hot'} if at_m == 'ALL' else {at_m}

    # Other models to be taken from calibration output.
    models = select(set(models_ids) - at_m, data, allow_miss=True)

    # Inputs to predict the gears.
    inputs = select(at_pred_inputs, data, allow_miss=True)

    from ..physical.gear_box.at_gear import calculate_error_coefficients
    from ..physical.gear_box.mechanical import calculate_gear_box_speeds_in

    def _err(model_id, model):
        gears = d.dispatch(
                inputs=c_dicts(inputs, {sgs: model_id, model_id: model}),
                outputs=['gears']
        )['gears']

        eng = calculate_gear_box_speeds_in(gears, vel, vsr, sv)
        err = calculate_error_coefficients(
            t_gears, gears, t_eng, eng, vel, sv
        )
        return err

    def _sort(v):
        e = select(t_e, v[0], output_type='list')
        return (e[0], -e[1], -e[2]), v[1]

    # Sort by error.
    at_m = select(at_m, data, allow_miss=True)
    rank = sorted(((_err(k, m), k, m) for k, m in at_m.items()), key=_sort)

    if rank:
        data['at_scores'] = collections.OrderedDict((k, e) for e, k, m in rank)
        e, k, m = rank[0]
        models[sgs], models[k] = k, m
        log.debug('at_gear_shifting_model: %s with mean_absolute_error %.3f '
                  '[RPM], accuracy_score %.3f, and correlation_coefficient '
                  '%.3f.', k, *select(t_e, e, output_type='list'))

    return models
