def identify_electric_loads(
        alternator_nominal_voltage, battery_currents, alternator_currents,
        gear_box_powers_in, times, on_engine, engine_starts,
        alternator_start_window_width):
    """
    Identifies vehicle electric load and engine start demand [kW].

    :param alternator_nominal_voltage:
        Alternator nominal voltage [V].
    :type alternator_nominal_voltage: float

    :param battery_currents:
        Low voltage battery current vector [A].
    :type battery_currents: numpy.array

    :param alternator_currents:
        Alternator current vector [A].
    :type alternator_currents: numpy.array

    :param gear_box_powers_in:
        Gear box power vector [kW].
    :type gear_box_powers_in: numpy.array

    :param times:
        Time vector [s].
    :type times: numpy.array

    :param on_engine:
        If the engine is on [-].
    :type on_engine: numpy.array

    :param engine_starts:
        When the engine starts [-].
    :type engine_starts: numpy.array

    :param alternator_start_window_width:
        Alternator start window width [s].
    :type alternator_start_window_width: float

    :return:
        Vehicle electric load (engine off and on) [kW] and energy required to
        start engine [kJ].
    :rtype: ((float, float), float)
    """

    rjo = co2_utl.reject_outliers
    b_c, a_c = battery_currents, alternator_currents
    c, b = alternator_nominal_voltage / 1000.0, gear_box_powers_in >= 0

    bH = b & on_engine
    bH = b_c[bH] + a_c[bH]
    on = off = min(0.0, c * rjo(bH, med=np.mean)[0])

    bL = b & ~on_engine & (b_c < 0)
    if bL.any():
        bL = b_c[bL]
        off = min(0.0, c * rjo(bL, med=np.mean)[0])
        if on > off:
            curr = np.append(bL, bH)
            if np.mean(np.abs(curr - on / c)) > np.mean(np.abs(curr - off / c)):
                on = off
            else:
                off = on

    loads = [off, on]
    start_demand = []
    dt = alternator_start_window_width / 2
    for i, j in _starts_windows(times, engine_starts, dt):
        p = b_c[i:j] * c
        # noinspection PyUnresolvedReferences
        p[p > 0] = 0.0
        # noinspection PyTypeChecker
        p = np.trapz(p, x=times[i:j])

        if p < 0:
            l = np.trapz(np.choose(on_engine[i:j], loads), x=times[i:j])
            if p < l:
                start_demand.append(p - l)

    start_demand = -rjo(start_demand)[0] if start_demand else 0.0

    return (off, on), start_demand
